# 백기선님 공개 코드 리뷰 받기! with 300명 22/09/17 (Package Structure, Test Code, DDD, ...)

최근에 백기선님이 유튜브에서 공개 코드 리뷰를 시작하셨다.

리뷰 내용을 보고 영감을 얻은 부분이 있었고, 부족한 부분을 알고 싶다는 생각에 용기를 내 신청했다..!

코드 리뷰 영상은 아래 링크에서 확인할 수 있다. (백기선 유튜브 - 멤버십 회원 전용 영상)
- https://www.youtube.com/watch?v=w3QKOHSIZig

내가 리뷰 받을 코드는 초기 상태의 코드라서 설명이 부족해서 미리 양해를 구했다..!

![img.png](img.png)

답변이 왔다.

**백기선님**: 아 물론이죠! 아직 완성 안된 프로젝트도 리뷰 가능합니다!

그래서 신청을 했다..!

## 리뷰 시작

리뷰를 할 때 실시간 접속자는 300분 정도 계셨다..!

![img_1.png](img_1.png)

**백기선님**: 코드 리뷰를 어디로 중점적으로 보면 좋을까요?!

**본인**: 어.. 프로젝트 초기 단계라서 **패키지 구조**나 **테스트 코드** 위주로 봐주시면 감사하겠습니다..!
(패키지 구조나 테스트 코드 구조는 잡았기 때문..! 사실 전체적으로 봐주셨다 ㅋㅋ..)

(... 간단한 팀소개 ...)

**백기선님**: 팀을 어떻게 만나신거에요??

**본인**: 제가 첫회사에 들어온 지 10개월차 정도인데 저도 네이버, 라인, 배달의 민족에 이직을 하고 싶은 생각이 들었는데.. **지표가 약간 부족**하다보니까 **사이드 프로젝트**를 해봐야겠다고 하는데 인맥이 없어서 사이드 프로젝트할 인원을 구하는 **카카오톡 오픈 채팅방**에 들어가서 팀을 구해서 진행하게 되었습니다.

ㅋㅋㅋ.. 이후에도 간단한 만담 진행 후 바로 리뷰를 진행해주셨다.

### 리뷰 진행
![img_3.png](img_3.png)

**백기선님**: API 패키지는 우선 도메인 별로 나눠 놓았네요! (account, artist, common, ...) 그쵸..! Common이 항상 생기죠 ㅎㅎ. Config는 Spring 설정파일 놓아둔 곳이고! 그래서 주요한 도메인은 account, artist, contest, cover, song인 것 같네요..! 

**본인**: 네네!

![img_2.png](img_2.png)

**백기선님**: 근데 이게 command가 뭔 뜻이에요..?! (song/command를 가리키시며..)

**본인**: 그게 CQRS 패턴이라고 command랑 query랑 모델을 분리하는 패턴입니다..!

**백기선님**: 아 CQRS..! 그런데 도메인 자체가 command에요?

**본인**: 넵넵..! 그렇게 사용했습니다.

**백기선님**: 아 그래요..? OK... 저는 조금 생소하지만~ ㅎㅎ

**본인**: ㅎㅎ..

![img_4.png](img_4.png)

**백기선님**: 오.. 이렇게 하셨네..! 이렇게 하신 이유가 있나요??

**본인**: '이렇게'가 저기 id참조 말씀이신가요?!

**백기선님**: 네네. JPA를 쓰셨는데 Artist랑 연관 관계를 맺은게 아니라, 그냥 이거는 사실상 관계가 없는 거죠..! DB를 표현한거죠..! 사실 이거를 제대로 쓸려면 Artist가 되야 하지 않아요..?!

**본인**: 아 네..! 사실 알고는 있는데, 이게 도메인을 라이프 사이클을 기준으로 객체 참조를 할 지 ID 참조를 할 지 정한다구 그러더라구요..! 그래서 라이프 사이클이 같지 않은 것 같아서 ID 참조를 걸었는데, 맞는 것인지는 잘 모르겠습니다!

**백기선님**: 아 ㅎㅎ 자 그럼 라이프 사이클에 대해서 한번 이야기해볼까요?? 말씀하신 라이프 사이클은 어떤 거죠??

**본인**: 가수인 Artist를 생성할 때랑 Song을 생성하고 삭제할 때랑 시점이 다르니까..! 네 그래서 분리했던 것 같습니다.

### 참고
이전에 봤던 우아콘 영상 내용이다. 해당 영상에서는 두 객체의 관계가 영구적일 때는 객체 참조를 사용한다.

더 자세히 풀어보자. 도메인 간의 관계는 연관 관계로 사용할 수 있다. 객체 참조는 연관 관계를 구현하는 방법 중 한 가지일 뿐이다..!

문제는 객체 참조를 하면 두 가지 문제가 생길 수 있다.
- 도메인 간의 결합도 상승
- 성능 이슈가 발생하기 쉽다. (모든 도메인을 다 조회하는 것도 가능)
- 수정할 도메인의 경계와 트랜잭션 경계가 모호해진다
- 패키지 의존성 사이클

따라서 함께 생성되고 함께 삭제되는 객체들은 묶고, 도메인 제약사항을 공유하는 객체들을 묶고 가능하면 분리하라고 나온다.

아직 보지 않았다면 꼭 참고하길 권해드린다. 아주 잘 설명해주신다!!
- https://youtu.be/dJ5C4qRqAgA

#### 계속

**백기선님**: 음.. 저는.. 이게 개별적인 라이프 사이클이 맞는건가..? 조금 의구심이 들긴 합니다. 제가 봤을 떄는 Song은 Artist에 종속적이라서 연관 관계를 맺어주는 게 맞는 게 아닌가..?! 그리고, 저도 의도적으로 이렇게 연관 관계를 끊는 것은 본적은 있어요. 이렇게 되면 artist 내용은 어떻게 가지고 오나요?!

**본인**: 가지고 오는 것은 ArtistRepository를 통해서 가져오는데, 물론 Artist 패키지에 있는 것을 참조하는 것은 아닙니다. Song의 Infrastructure에 있는 인터페이스를 사용해서 가져옵니다.

![img_5.png](img_5.png)

**백기선님**: 아.. 그러면 이 프로젝트 안에서는 연관 관계가 아예 없겠네요..?! (찾으시다가) 어? 여기있네..! 아..! 그러니까 여기 패키지안에서만 연관 관계를 만들었나 보네? 맞아요?!

**본인**: 아 네네! 

**백기선님**: 아..! 그러니까 다른 패키지에서는 다른 패키지로 연관 관계를 아예 안 만들었죠?! 아~.. 아.. 알겠어요.. 네 나름 괜찮네요! 이렇게 개발하면 좋은 점은 패키지 별로 따로 뜯어내기가 아주 쉬워지죠..! 그런데 실제로 그렇게 되어있나요..?!

**본인**: 아.. 네! 실제로 이게 전혀 다른 애그리거트 단위로 패키지를 잡아서 다른 패키지에 대한 의존성은 전혀 없을겁니다.

**백기선님**: 아~ 재밌네.. 연관 관계를 안쓴 건 아니고, 연관 관계를 쓰는 기준이 패키지 내부만이다..! 아.. 재밌네~ 재밌네..! 잘하셨네요..! 그런데 저라면 아마 이렇게 하진 않았을 것 같아요..! 왜냐하면 아직 분리 안됬으니까 ㅎㅎ..

(흐음.. 이때 딱 YAGNI가 생각 났다. YAGNI는 내가 정말 좋아하는 원칙으로 현재 필요한 것이 아니라면 구현하지 않는 원칙이다. 그래서 한번 생각해보게 되었다.)
```
현재 필요하지 않는 기능은 추가하지 않는 것이 맞다.

하지만 설계는 조금은 다른 것 같다. 확장성을 고려하지 않은 설계로 구현하게 되면, 내가 잠깐 손을 놓은 사이에 다른 개발자가 들어와서, 확장성이 없는 설계를 이어서 개발하게 될 수 있다.

즉, 당장 필요하지 않더라도, 확장성 있게 설계하는 것도 나름의 일리는 있다고 생각한다. (Case-by-case)
```

**백기선님**: 막상 해보시니까 어떤 게 더 편해요??

**본인**: 트랜잭션 단위나 영향 범위에 대해 걱정하지 않아도 되서 좋은 것 같아요. 대신 할 일이 조금 많아지는 것 같아요.

**백기선님**: 구체적으로 어떤 할 일이 늘어나나요..?

**본인**: 예를 들면 Cover에서 Song(원곡)을 꺼내는 일이 아주 아주 아주 많은데, 그럴 때마다 특정 인터페이스를 사용해서 꺼내야 하는 점이 불편한 것 같습니다.

**백기선님**: 아 맞아요. 이게 가장 큰 단점이거든요..! 잘 알고 계시네요. 저는 사실 기술적인 선택은 자유라고 생각하고, 대신 어떤 기술을 선택할 때 어떤 장점과 단점이 있는 지 본인이 잘 알면 된다고 생각하는데, 잘 아시고 계신 것 같아요. 재밌네요. 네. 재밌네요. (모든 패키지 소스 뒤적거리시면서..!) 전 뭐 잘하신 것 같은데요?! 딱히 뭐 문제 될 부분이.. 아..! 테스트나 좀 볼까?? ㅎㅎ

**본인**: 아 네..! 아 테스트를 정말 잘 짜고 싶었어요..! 그런데 잘 못합니다 ㅎㅎ..

![img_6.png](img_6.png)



